apiVersion: http.m.crossplane.io/v1alpha2
kind: Request
metadata:
  name: manage-user-with-cluster-config
  namespace: default
spec:
  forProvider:
    # This example demonstrates using ClusterProviderConfig with namespaced resources
    # ClusterProviderConfig allows cross-namespace access while the resource remains namespaced
    insecureSkipTLSVerify: true
    waitTimeout: 5m
    headers:
      Content-Type:
        - application/json
      Authorization:
        - "Bearer {{ auth:crossplane-system:token }}"
    payload:
      baseUrl: http://flask-api.default.svc.cluster.local/v1/users
      body: |
        {
          "username": "cluster_config_user", 
          "password": "secretdata {{ user-password:crossplane-system:password }}",
          "email": "cluster_config_user@example.com", 
          "age": 35
        }
    mappings:
      # Scenario 1: Action specified, method not specified (defaults to POST for CREATE)
      - action: CREATE
        # method: "POST" 
        body: |
          {
            username: .payload.body.username, 
            email: .payload.body.email, 
            age: .payload.body.age,
            password: .payload.body.password
          }
        url: .payload.baseUrl
        headers:
          Content-Type:
            - application/json
          Authorization:
            - "Bearer {{ auth:crossplane-system:token }}"
          Extra-Header-For-Post:
            - extra-value

      # Scenario 2: Action specified, method not specified (defaults to GET for OBSERVE)
      - action: OBSERVE
        # method: "GET"
        url: .payload.baseUrl + "/" + (.response.body.id | tostring)

      # Scenario 3: Method specified, action not specified (PUT implies UPDATE)
      - method: "PUT"
        # action: UPDATE
        body: |
          {
            email: .payload.body.email, 
            age: .payload.body.age
          }
        url: .payload.baseUrl + "/" + (.response.body.id | tostring)

      # Scenario 4: Action specified, method not specified (defaults to DELETE for REMOVE)
      - action: REMOVE
        # method: "DELETE"
        url: .payload.baseUrl + "/" + (.response.body.id | tostring)
    
    expectedResponseCheck:
      type: CUSTOM
      logic: |
        if .response.body.password == .payload.body.password
         and .response.body.age == 35
         and .response.headers."Content-Type" == ["application/json"]
         and .response.headers."X-Secret-Header"[0] == "{{ response-secret:crossplane-system:extracted-header-data }}"
         then true 
         else false 
         end

    isRemovedCheck:
      type: CUSTOM
      logic: |
        if .response.statusCode == 404
          and .response.body.error == "User not found"
          then true 
          else false 
          end

    # Using ClusterProviderConfig allows accessing secrets in crossplane-system namespace
    secretInjectionConfigs: 
      - secretRef:
          name: response-secret-cluster
          namespace: crossplane-system  # Cross-namespace access via ClusterProviderConfig
        metadata:
          labels:
            managed-by: provider-http-cluster-config
          annotations:
            username: .body.username
        keyMappings:
          - secretKey: extracted-user-email
            responseJQ: .body.email
            missingFieldStrategy: preserve
          - secretKey: extracted-header-data
            responseJQ: .headers."X-Secret-Header"[0]
            missingFieldStrategy: setEmpty
        setOwnerReference: true
      
      - secretRef:
          name: response-user-password-cluster
          namespace: crossplane-system  # Cross-namespace access via ClusterProviderConfig
        keyMappings:
          - secretKey: extracted-user-password
            responseJQ: .body.password
            missingFieldStrategy: delete
          - secretKey: extracted-user-age
            responseJQ: .body.age

  # Using ClusterProviderConfig instead of namespaced ProviderConfig
  # This allows cross-namespace access for secrets and configurations
  providerConfigRef:
    name: http-conf-cluster