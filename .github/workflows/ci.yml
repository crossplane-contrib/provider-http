name: CI

on:
  push:
    branches:
      - main
      - release-*
  pull_request: {}
  workflow_dispatch: {}

env:
  # Common versions
  GO_VERSION: '1.24.6'
  GOLANGCI_VERSION: 'v1.64.8'
  DOCKER_BUILDX_VERSION: 'v0.8.2'

jobs:
  detect-noop:
    runs-on: ubuntu-latest
    outputs:
      noop: ${{ steps.noop.outputs.should_skip }}
    steps:
      - name: Detect No-op Changes
        id: noop
        uses: fkirc/skip-duplicate-actions@f75f66ce1886f00957d99748a42c724f4330bdcf # v5.3.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths_ignore: '["**.md", "**.png", "**.jpg"]'
          do_not_skip: '["workflow_dispatch", "schedule", "push"]'

  detect-test-server-changes:
    runs-on: ubuntu-latest
    outputs:
      test-server-changed: ${{ steps.changes.outputs.test-server }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check for test server changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # For push events, check if test server files changed in the last commit
            if git diff --name-only HEAD~1 HEAD | grep -q "^cluster/test/"; then
              echo "test-server=true" >> $GITHUB_OUTPUT
            else
              echo "test-server=false" >> $GITHUB_OUTPUT
            fi
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, check if test server files changed compared to base branch
            if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "^cluster/test/"; then
              echo "test-server=true" >> $GITHUB_OUTPUT
            else
              echo "test-server=false" >> $GITHUB_OUTPUT
            fi
          else
            # For other events, assume test server might have changed
            echo "test-server=true" >> $GITHUB_OUTPUT
          fi

  build-test-server:
    uses: ./.github/workflows/build-server.yml
    needs: [detect-noop, detect-test-server-changes]
    if: needs.detect-noop.outputs.noop != 'true' && needs.detect-test-server-changes.outputs.test-server-changed == 'true'


  lint:
    runs-on: ubuntu-latest
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Lint
        uses: golangci/golangci-lint-action@971e284b6050e8a5849b72094c50ab08da042db8 # v6.1.1
        with:
          version: ${{ env.GOLANGCI_VERSION }}
          args: --timeout=5m

  check-diff:
    runs-on: ubuntu-latest
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Check Diff
        run: make check-diff

  unit-tests:
    runs-on: ubuntu-latest
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Run Unit Tests
        run: make -j2 test

      - name: Publish Unit Test Coverage
        uses: codecov/codecov-action@v5
        with:
          flags: unittests
          file: _output/tests/linux_amd64/coverage.txt

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [detect-noop, detect-test-server-changes, build-test-server]
    if: needs.detect-noop.outputs.noop != 'true' && always() && !cancelled() && !failure()

    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Determine test server image
        id: test-server-image
        run: |
          if [ "${{ needs.detect-test-server-changes.outputs.test-server-changed }}" = "true" ] && [ "${{ needs.build-test-server.result }}" = "success" ]; then
            # Use the built image from the build-test-server job
            IMAGE="${{ needs.build-test-server.outputs.image-name }}:${{ needs.build-test-server.outputs.image-version }}"
            echo "Using newly built test server image: $IMAGE"
            echo "image=$IMAGE" >> $GITHUB_OUTPUT
          else
            # Use the default crossplane-contrib image
            IMAGE="ghcr.io/crossplane-contrib/provider-http-server:latest"
            echo "Using default crossplane-contrib test server image: $IMAGE"
            echo "image=$IMAGE" >> $GITHUB_OUTPUT
          fi

      - name: Run the end to end tests
        run: make e2e
        env:
          # We're using docker buildx, which doesn't actually load the images it
          # builds by default. Specifying --load does so.
          BUILD_ARGS: "--load"
          # Use the test server image determined above
          TEST_SERVER_IMAGE: ${{ steps.test-server-image.outputs.image }}
