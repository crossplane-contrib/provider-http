name: Build and Push Test Server

on:
  push:
    branches: [ main ]
    paths:
      - 'cluster/test/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'cluster/test/**'

env:
  REGISTRY: ghcr.io
  # For PRs from forks, use the PR author's registry to avoid permission issues
  # For pushes to main branch, use the repository owner's registry
  IMAGE_NAME: ${{ github.event_name == 'pull_request' && github.actor || github.repository_owner }}/provider-http-server

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./cluster/test
        # For PRs from forks: single platform + load for testing
        # For pushes: multi-platform + push  
        platforms: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
        push: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
        load: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test the server (local build)
      if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository
      run: |
        echo "ðŸ”¨ Container built successfully!"
        echo "ðŸ§ª Testing server functionality..."
        
        # Run the container for testing (use first tag from metadata)
        FIRST_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n 1)
        docker run -d --name test-server -p 5000:5000 $FIRST_TAG
        
        # Wait for server to start
        sleep 10
        
        # Test the endpoints
        echo "Testing login endpoint..."
        curl -f -H "Authorization: Bearer my-secret-value" -X POST http://localhost:5000/v1/login
        
        echo "Testing notify endpoint..."
        curl -f -H "Authorization: Bearer my-secret-value" -X POST http://localhost:5000/v1/notify
        
        echo "Testing user creation..."
        curl -f -H "Authorization: Bearer my-secret-value" -H "Content-Type: application/json" -X POST -d '{"name":"test"}' http://localhost:5000/v1/users
        
        echo "âœ… All tests passed!"
        
        # Clean up
        docker stop test-server
        docker rm test-server

    - name: Test the server (pushed image)
      if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
      run: |
        # Wait for container to be available
        sleep 5
        
        # Run the container for testing
        FIRST_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n 1)
        docker run -d --name test-server -p 5000:5000 $FIRST_TAG
        
        # Wait for server to start
        sleep 10
        
        # Test the endpoints
        echo "Testing login endpoint..."
        curl -f -H "Authorization: Bearer my-secret-value" -X POST http://localhost:5000/v1/login
        
        echo "Testing notify endpoint..."
        curl -f -H "Authorization: Bearer my-secret-value" -X POST http://localhost:5000/v1/notify
        
        echo "Testing user creation..."
        curl -f -H "Authorization: Bearer my-secret-value" -H "Content-Type: application/json" -X POST -d '{"name":"test"}' http://localhost:5000/v1/users
        
        # Clean up
        docker stop test-server
        docker rm test-server